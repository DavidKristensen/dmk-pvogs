A) Things to do each time we release a new update:
  1) Test across a wide range of browsers. I tested the current page against Firefox, Chrome, and Safari on a Mac OS X Desktop, and a smaller laptop screen, plus Edge on a Windows 10 machine (looks weird:-). I don't have access to an older Windows machine, but we should try to test on one of those too.
  2) Test all features, and in particular the interactions between features. Fixing the sorting might break the filtering, for instance...
  3) Upon any change involving URLs, test all relevant links to make sure that none are broken. I wrote this script to do it for you the first time, which you may want to learn from: http://dmk-brain.ecn.uiowa.edu/pVOGs.new/src/testlinks.pl.
  4) Do not add a feature unless it *fully* works. Having nothing at all is often better than a user being promised something that doesn't work correctly or as expected, at which point frustration kicks in and they give up on the entire website (despite all the good it has beyond just the few broken things).
  5) Debugging tip: use a small sample of data (e.g., 3 columns, or perhaps 11 to have just enough to trigger the pagination feature) to do *thorough* testing of features, before later switching to using the entire database to do larger-scale testing (i.e., some errors that may not show up for your small set may do so for your larger one).

============================================================================================================

B) Things that absolutely need to be fixed before we can release to the public:
  1) fix Proteins and # of VOGs columns (possibly by using orthogonal data rather than custom sort function?) - numerical sorting now works again, at the cost of external links, but now range filtering is broken instead.
  2) Remove the entire Export button for now since this function does not work as expected - i.e., hidden columns should not show up in the exported material.
  3) Remove link at the bottom of page for Protein Table.
  4) Add Google Analytics tracking back.

------------------------------------------------------------------------------------------------------------

C) Things that, while not 100% necessary, really *should* be fixed before the page is released to the public, if at all possible:
  1) Now that the arrow has been removed from the # of VOGs column, the fact that it contains a link again gets lost (especially when the links have been followed before and so they appear in purple color rather than blue). After the drop-downs, this was the most highly-anticipated feature that I looked forward to seeing in the new release of these pages, so it would be a huge shame if this were lost, especially when we are so close to having it done.
Jerry's tip (no longer fully applicable to the current set of data that lacks the arrow, but could be helpful for when we try to add it back in): Possible cause of numerical sorting not working: Safari cannot sort on columns that have custom sorting functions, neither can chrome. However, chrome does sort in random, whereas Safari does not work at all.
  2) The location & visualization of the Range Search, Show/Hide Columns, Export options, and Show entries buttons are odd.
    i) The Range Search button looks less tall than the other two for some reason, perhaps it is using a different font? (maybe fixing #ii below will help this too though?)
    ii) The Range Search button should probably be on the same row as the other large grey buttons, and then when expanded, put the text above rather than below it.
    iii) (done - by removing the word "slow" in the toggling of the element) Speaking of expanding the range search, it looks odd. In the page at https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_toggle_hide_show, I pasted the exact table description that the genome page uses (id="rangeSearch"), and it appears & disappears instantly, instead of the way that this table partially starts to be rendered and skips & jumps all over. Possibilities: encase the table in a <div> element so that it is rendered all at once instead of having to be rendered element-by-element; or even better, see how that page uses the display() element rather than toggle() - my guess is that it completely renders it the first time the page is loaded, but then optionally either displays it or not, without having to re-render on the fly.
    iv) At the very least some space should be added between the 'Export options' and the Show entries buttons - although it would probably be easier to move the latter to the next line.
    v) Speaking of space, there is a huge vertical space between the Range Search button and the next line of grey buttons. Combining them all onto one line would solve this, but if that cannot be done, then at least this space should be made smaller somehow?
  3) The drop-downs should pouplate with the actual data being shown. Right now it looks odd when all of them are shown all of the time. e.g., if Host Domain is changed to "Archaea", then only the archaeal entries should be shown in the "Genus" box. Here is a page that has this functionality: https://www.ncbi.nlm.nih.gov/genome/browse/. Plus, it would really help as a reporting tool to help people learn about the data (e.g., what genera of viruses infect archaeal hosts?).
  4) The selection of rows and the clicking of links are interacting with one another in odd ways. i.e., clicking a link first selects the row, then goes to the next page, and if you come back, the row is still selected. Clicking a link should not select the row, imho. Advanced thought: what if you have a bunch of rows selected, then accidentally click a link and lose all of your selection? Perhaps that is too advanced to worry about though:-)
  5) Change titles of every web page to appropriate ones (now they are all the same)

------------------------------------------------------------------------------------------------------------

D) Things that we should do soon to make future improvements easier:
  1) Put the code back into a GitHub repository, since the old one is now obsolete.
  2) Change to a different data model, as described at https://datatables.net/manual/data/orthogonal-data. Thus, instead of having just one source of data, and having to split it up each time you want to do something (e.g., '<a href="genomes/FN436268.html">‣ 13 </a>' would need to get converted to just '13' in order to sort it numerically, as is done via the command 'proteins.split(" ")[2]', and then casting that result to a number with 'Number()'), you can store it separately - one for the visualization to the user, and another for the manipulation by the computer.
  3) Formalize data "types" for every entry in the database. e.g., "13" should be numeric, while "FN436268" is text.
  4) Some data should also be stored locally in a variable for at least the duration while the code is processing the same row from the JSON file. Right now genome accessions such as "FN436268" are provided 3 separate times in the JSON file, which is a huge redundancy and waste of space and network traffic, as well as a source of confusion.
  5) Find some way to make the page load only a small portion of the data. I thought server-side processing worked this way (e.g., see https://datatables.net/examples/data_sources/server_side.html), but I may be mistaken, or perhaps some other element is needed to get this to work (e.g., pipelining such as https://datatables.net/examples/server_side/pipeline.html, or perhaps we need to switch to additional types of technology such as a webserver with CGI or REST interface). Otherwise, larger pages such as the Protein Table page that we tried to make work become impossible. Fortunately, a work-around that we could implement very quickly (even if it is not the "proper" way to do things) would be to force this to happen by dividing up the data ourselves into thousands of smaller chunks - e.g., divide up the nearly 300,000 proteins into only 3,000 files, each holding one genome's complement of proteins.

------------------------------------------------------------------------------------------------------------

E) New features to add later:
  1) Make export function work properly, which includes:
    i) (necessary) only print columns that are shown (but not hidden)
    ii) (necessary) do not print "special characters", such as '‣'.
    iii) (super-nice) once the above two are fixed, add back Excel and CSV options
    iv) (super-nice, but depends on whether it is possible at all) add back PDF option, but only as long as the number of columns always fits - i.e., perhaps try a landscape mode? Or only do the export if the number of columns is less than some threshold (and otherwise print a message instead that it will not fit to the page). But if there is no easy way for JavaScript to do this directly, then instead do not have a PDF option at all - it would be super-nice but is not worth confusing them by making them think that it will work when it doesn't. They can always do "print" instead, and then just print it to a PDF that way.
    v) (would be nice) - when an export option is clicked, de-focus the 'Export options' button. i.e., so that user can more easily read the status message about copying to the clipboard, etc.
  2) Add 'reset' button, since with the many drop-downs, range search filters, search boxes, pagination location, etc., it is really a huge pain to have to click on each item individually when you want to start over and get a fresh start. Since refreshing the page does this now, and since switching to JSON makes it load *much* faster, this is less critical than it used to be, but would still be nice to have (and I think not too difficult to implement?).
  3) Add state-saving feature (e.g., https://datatables.net/examples/basic_init/state_save.html), so that if a user accidentally clicks, they can return and have the same environment as when they left.
  4) Make the Protein Table page work, to show all 300,000 proteins in the database. Although as mentioned in D5 above, this would only work if we show only a small subset at a time.
  5) Somehow show both the set of proteins in a single genome, and also some properties about that genome, in a single view (or following the same technique, other combinations such as VOG + protein, etc.). e.g., as is done now http://dmk-brain.ecn.uiowa.edu/pVOGs.new/genomes/NC_009452.html. Possibilities:
    i) This could be done by adding a new 'child table' entry to the Genome Table page - see https://datatables.net/examples/api/row_details.html and https://datatables.net/examples/server_side/row_details.html that say that "The child row can contain any data you wish, including links, images, inner tables etc.”
    ii) Or add a bar to the top of the new Protein Table page (when it exists). Although this one is problemmatic for several reasons - like if you come to the page to look at one genome (with a given URL), but then change the filtering to look at a different genome, that introduces lots of problems, like how can the URL be changed (my guess is that it cannot), and what then is shown in the little genome table at the top? Or what if you want to look at the list of *ALL* proteins - what would be shown in that little table then? This is still a valid option though, and offers some nice advantages: e.g., what if you want to see all proteins not just from a genome, but from a Genus, or Family, or Order, or that have a particular Genetic Material. At that point, this view would show some nice statistics about those proteins - such as the range of protein sizes, and of the # of VOGs per genome, etc.
    iii) Another thought is to replace the nearly 3,000 pages such as http://dmk-brain.ecn.uiowa.edu/pVOGs.new/genomes/NC_009452.html, with a single page that looks at the URL and gets the appropriate data from the JSON file(s) somehow. Ideas for how to do the latter include reading all proteins at once, but applying a filter to only store those from the one genome, or possibly splitting the data up into 3,000 separate files and then just use the URL to read the appropriate one.
  6) Slider bars for numeric data. e.g., here are a couple of basic, built-in examples: https://www.w3schools.com/jquerymobile/jquerymobile_form_sliders.asp and https://www.w3schools.com/jquerymobile/tryit.asp?filename=tryjqmob_forms_slider_range, and here is a super-cool advanced one that even allows you to change the scale!: https://refreshless.com/nouislider/examples/#section-non-linear. And of course showing the little histogram on it makes it that much more super-awesome: e.g., https://www.smashingmagazine.com/wp-content/uploads/2014/09/06-linear-histogram-slider-opt.png, as well as increasing functionality by showing the pattern of variation of the data (so it becomes both a reporting tool as well as an interactive filtering feature).
